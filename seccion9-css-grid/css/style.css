:root {
    --azul: #0071b7;
    --blanco: #FFF;
    --naranja: #ff4f1e;
}
html {
    font-size: 62.5%; /** 1REM = 10pX **/
}

body {
    background-color: var(--azul);
    font-family:  'Lato', sans-serif;
    font-size: 1.6rem;
}

.caja-curso {
    background-color: var(--naranja);
    text-align: center;
    color: var(--blanco);
    padding: 5rem;

}
.caja-curso h1 {
    margin: 0;
}
.caja-curso p {
    font-size: 2.4rem;
}
.caja-curso a {
    font-size: 2.4rem;
    padding: 2rem;
    display: inline-block;
    text-decoration: none;
    color: var(--blanco);
    padding: 0;
}


h1, h2 {
    color: var(--blanco);
    text-align: center;
    margin: 5rem 0;
}

.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}
.box {
    background-color: var(--naranja);
    color: var(--blanco);
    padding: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 4rem;
    margin-bottom: 2rem;
}

/** 01 **/

.grid-1 {
    display: grid;
    
}

/** 2 **/
.grid-2 {
    display: grid;
    grid-template-columns: repeat(3, 300px);
}
.grid-2 .box:nth-child(2) {
    grid-column: 1 / 2 ;
}
/* 3 */
.grid-3 {
    display: grid;
    grid-template-rows: repeat(2, 300px);
    grid-template-columns: repeat(3, 300px);
}

.grid-3 .box:nth-child(2) {
    grid-row: 1 / 2;
}

/* 4 */
.grid-4 {
    display: grid;
    grid-template-rows: repeat(3, 300px);
    grid-template-columns: repeat(3, 300px);
}

.grid-4 .box:nth-child(2) {
    background-color: cornflowerblue;
    /* grid-column: 2 / span 2; Va a tomar desde la linea 2 hasta la 4. 
    Se expande 2 columnas*/
    /* Tambien podemos expandir sus filas por ejemplo:
    Expandete 2 filas desde la fila 1 */
    /* grid-row: 1 /span 2; */
    /* Otra forma de colocar. Vete de la linea 2 a la linea 4 de las columnas */
    grid-column: 2 / 4;
    /* Desde las filas, vete desde la 1 hasta la 3 fila */
    grid-row: 1 / 3;
}

/* 5 */
.grid-5 {
    display: grid;
    /* La primera es row, la segunda es column */
    /* Creame 2 filas de 300px, y creame 3 columnas de 300px */
    grid: repeat(2, 300px) / repeat(3, 300px);
}

/** 6 **/

.grid-6 {
    display: grid;
    grid: repeat(2, 300px) / repeat(3, 300px);
    /* grid-auto-flow evita tener espacios libres y posiciona los demas elementos donde 
    corresponden */
    /* dense posiciona los elemntos donde se pueda aprovechar mas el grid */
    grid-auto-flow: dense;
}

.grid-6 .box:nth-child(2) {
    /* El numero dos me va a posicionar desde la columna 1 hasta la 2 */
    grid-column: 1 / 2;
}

/*  7 **/
.grid-7 {
    display: grid;
    /* grid-template-columns: 2fr repeat(2, 1fr); */
    /* Creo dos filas y mide 50rem. Creo 3 columnas y miden 1fr */
    /* La fraccion es mas optima a dar espacio a cadadiv */
    /* Un row si no tiene altura, va a llenar su espacio de acuerdoa  su contenido de acuerdo
    a los valores padding , margin, borders y contenido.
    Por ejemplo height:500px */
   /* aqui forzamos a que la altura de sus filas sea 50rem */
    grid: repeat(2, 50rem) / repeat(3, 1fr);

    /* Creame 3 columnas. La prmera es de 2fr y las otras dos columnas de 1fr
     */
     /* grid-template-columns: 2fr repeat(2, 1fr); */
}

/* 8 **/

.grid-8 {
    display: grid;
    grid: repeat(2, 20rem) / repeat(3, 1fr);
    
    /* column-gap: 4rem;
    row-gap: 4rem; */
    /* gap: 4rem 1rem; separacion de filas 4 rem y columnas 1 rem */
    /* aqui colocamos separacion de columnas  y filas, misma valor*/
    gap: 4rem;
}

.grid-8 .box {
    /* Quitamos los magenes que trae por defecto */
    margin: 0;
}

/** 9 **/
.grid-9 {
    display: grid;
    /* Con la altura de 120rem o 1200px se va a estirar bastante para darle forma a una pagina */
    height: 120rem;
    /* Con areas, tu dibujas tu sitio web */
    /* Las areas trabajan de la siguiente manera: Si tienes tres columnas, debes especificar tres areas */

    grid-template-areas: "header header header"
                         "nav nav nav"
                         "contenido contenido sidebar"
                         "footer footer footer"
    ;

    /* No nos escapamos de definir las columnas */

    grid-template-columns: repeat(3, 1fr);
    /* Aqui le damos forma al ancho de las filas para la pagina */
    grid-template-rows: 2.5fr 1fr 6fr 2.5fr;
    gap: 4rem;
}
.grid-9 .box {
    margin: 0;
}

/* Vamos a posicionar el header del html con el grid de css
El primer child  es header  y lo posicionmos en el area llamada header */
.grid-9 .box:nth-child(1) {
    grid-area: header;
}
.grid-9 .box:nth-child(2) {
    grid-area: nav;
}
.grid-9 .box:nth-child(3) {
    grid-area: contenido;
}
.grid-9 .box:nth-child(4) {
    grid-area: sidebar;
}
.grid-9 .box:nth-child(5) {
    grid-area: footer;
}


/** 10 **/

/* Grid template incluye las areas, las columnas y los rows */
.grid-10 {
    display: grid;
    height: 120rem;
    /* En grid-template estan las areas con los rows */
    grid-template: "header header header" 2.5fr
                    "nav nav nav" 1fr
                    "contenido contenido sidebar" 6fr
                    "footer footer footer" 2.5fr / 1fr 1fr 1fr
    ;
      /* Despues del slash, estamos especificando las columnas "footer footer footer" 2.5fr / 1fr 1fr 1fr */
      /* En este caso es de 1 fr y son tres columnas / 1fr 1fr 1f */
    gap: 4rem;
}
.grid-10 .box {
    margin: 0;
}

.grid-10 .box:nth-child(1) {
    grid-area: header;
}
.grid-10 .box:nth-child(2) {
    grid-area: nav;
}
.grid-10 .box:nth-child(3) {
    grid-area: contenido;
}
.grid-10 .box:nth-child(4) {
    grid-area: sidebar;
}
.grid-10 .box:nth-child(5) {
    grid-area: footer;
}

/** 11 **/
.grid-11 {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    /* Las columnas crecen con 300 px */
    height: 300px;
}



/* 12 */

.grid-12 {
    display: grid;
    /* Auto fill crea columnas mientras halla espacios disponibles, y el espacio disponible
    crea y quedan vacias pero ya dividido */
    grid-template-columns: repeat( auto-fill, 200px);
    /* AutoFit solo te crea las unicamentes las que hay necesarias */
    grid-template-columns: repeat( auto-fit, 200px);

    /* Si es responsive, el valor minimo es de 200px, si llega menos a 200px, salta la linea y te conserva
    esos 200px. Si es mas de 200px, te coloca es una fraccion. 1fr */
    grid-template-columns: repeat(auto-fit, minmax( 200px, 1fr ) );
    grid-template-columns: repeat(auto-fit, minmax( 300px, 1fr ) );
}

.grid-1 {
    display: grid;
}